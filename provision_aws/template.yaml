AWSTemplateFormatVersion: '2010-09-09'
Description: Static Website Infrastructure with CloudFront

Parameters:
  DomainName:
    Type: String
    Description: The domain name for the website
  
  BucketName:
    Type: String
    Description: Name of the S3 bucket
    
  Environment:
    Type: String
    Description: Environment (prod/dev)
    
  CertificateArn:
    Type: String
    Description: ARN of the ACM certificate

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - !Sub 'https://${DomainName}'
              - !Sub 'http://${DomainName}'
              - 'http://localhost:*'
            ExposedHeaders:
              - ETag
            MaxAge: 3600

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: 
              - s3:GetObject
            Resource: !Sub '${S3Bucket.Arn}/*'

          - Sid: AllowBucketLocation
            Effect: Allow
            Principal:
              AWS: !GetAtt FeedbackUser.Arn
            Action: s3:GetBucketLocation
            Resource: !Sub '${S3Bucket.Arn}'

          - Sid: AllowDeploymentAccess
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action:
              - s3:PutObject
              - s3:DeleteObject
              - s3:ListBucket
            Resource:
              - !Sub '${S3Bucket.Arn}'
              - !Sub '${S3Bucket.Arn}/assets/*'
              - !Sub '${S3Bucket.Arn}/index.html'
              - !Sub '${S3Bucket.Arn}/error.html'
              - !Sub '${S3Bucket.Arn}/proposals/*'
              - !Sub '${S3Bucket.Arn}/examples/*'

          - Sid: FeedbackUserAccess
            Effect: Allow
            Principal:
              AWS: !GetAtt FeedbackUser.Arn
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
            Resource:
              - !Sub '${S3Bucket.Arn}/feedback/*'
              - !Sub '${S3Bucket.Arn}/proposals/*'
              - !Sub '${S3Bucket.Arn}/images/*'
              - !Sub '${S3Bucket.Arn}/examples/*'

          - Sid: FeedbackUserBucketAccess
            Effect: Allow
            Principal:
              AWS: !GetAtt FeedbackUser.Arn
            Action: s3:ListBucket
            Resource: !GetAtt S3Bucket.Arn
            Condition:
              StringLike:
                's3:prefix': 
                  - 'feedback/*'
                  - 'proposals/*'
                  - 'images/*'
                  - 'examples/*'

          # Deny direct bucket access to feedback objects from anyone
          # except the root account, the FeedbackUser, and the FeedbackLambdaRole.
          - Sid: DenyDirectAccessToFeedback
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !Sub '${S3Bucket.Arn}/feedback/*'
            Condition:
              StringNotLike:
                'aws:PrincipalArn':
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
                  - !GetAtt FeedbackUser.Arn
                  # Add the Lambda Role so it is NOT denied.
                  - !GetAtt FeedbackLambdaRole.Arn

          - Sid: AllowCloudFrontAccess
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource:
              - !Sub '${S3Bucket.Arn}/*'
            Condition:
              StringEquals:
                # Reference the DistributionId properly.
                AWS:SourceArn: !Sub
                  - "arn:aws:cloudfront::${AWS::AccountId}:distribution/${DistId}"
                  - { DistId: !Ref CloudFrontDistribution }

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${AWS::StackName}-OAC'
        Description: Origin Access Control for S3
        SigningBehavior: always
        SigningProtocol: sigv4
        OriginAccessControlOriginType: s3

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Aliases:
          - !Ref DomainName
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        Origins:
          - DomainName: !Sub '${S3Bucket.RegionalDomainName}'
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          DefaultTTL: 3600
          MaxTTL: 86400
          MinTTL: 0
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        CacheBehaviors:
          - PathPattern: /feedback/*
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: https-only
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            Compress: true
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
            ForwardedValues:
              QueryString: true
              Headers:
                - Authorization
              Cookies:
                Forward: none
          - PathPattern: /proposals/*
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: https-only
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            Compress: true
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
            ForwardedValues:
              QueryString: true
              Headers:
                - Authorization
              Cookies:
                Forward: none
          - PathPattern: /examples/*
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: https-only
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            Compress: true
            DefaultTTL: 3600
            MaxTTL: 86400
            MinTTL: 0
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html

  FeedbackUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Sub '${AWS::StackName}-feedback-manager'
      Policies:
        - PolicyName: FeedbackManagement
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: 
                  - !Sub 'arn:aws:s3:::${BucketName}/feedback/*'
                  - !Sub 'arn:aws:s3:::${BucketName}/proposals/*'
                  - !Sub 'arn:aws:s3:::${BucketName}/images/*'
                  - !Sub 'arn:aws:s3:::${BucketName}/examples/*'
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                  - s3:ListBucket
                Resource: !Sub 'arn:aws:s3:::${BucketName}'
                Condition:
                  StringLike:
                    's3:prefix':
                      - 'feedback/*'
                      - 'proposals/*'
                      - 'images/*'
                      - 'examples/*'

  FeedbackUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref FeedbackUser

  FeedbackLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-feedback'
      RetentionInDays: 14

  FeedbackLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource: 
                  - !Sub 'arn:aws:s3:::${BucketName}/feedback/*'
                  - !Sub 'arn:aws:s3:::${BucketName}'

  FeedbackFunction:
    Type: AWS::Lambda::Function
    DependsOn: FeedbackLogGroup
    Properties:
      FunctionName: !Sub '${AWS::StackName}-feedback'
      Handler: index.lambda_handler
      Role: !GetAtt FeedbackLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import uuid
          from datetime import datetime
          import os
          from botocore.exceptions import ClientError
          import logging

          # Set up logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          s3_client = boto3.client('s3')
          BUCKET_NAME = os.environ['BUCKET_NAME']
          ALLOWED_ORIGIN = os.environ['ALLOWED_ORIGIN']
          
          # Define max size (e.g., 1 MB).
          MAX_FEEDBACK_SIZE = 1024 * 1024
          
          # Define response headers
          response_headers = {
              'Content-Type': 'application/json'
          }
          
          ALLOWED_ORIGINS = [
              ALLOWED_ORIGIN,
              'http://localhost:5173',  # Vite default dev port
              'http://localhost:3000',  # Alternative dev port
              ''  # Allow empty origin
          ]
          
          def lambda_handler(event, context):
              logger.info('Event: %s', json.dumps(event))
              logger.info('ALLOWED_ORIGINS: %s', ALLOWED_ORIGINS)
              
              # Validate origin
              headers = event.get('headers') or {}
              origin = headers.get('origin') or headers.get('Origin')
              
              # If no origin is provided, use empty string for comparison
              if origin is None:
                  origin = ''
              
              logger.info('Request origin: %s, type: %s', origin, type(origin))
              logger.info('Origin in ALLOWED_ORIGINS: %s', origin in ALLOWED_ORIGINS)
              logger.info('ALLOWED_ORIGIN env var: %s', os.environ['ALLOWED_ORIGIN'])
  
              if origin not in ALLOWED_ORIGINS:
                  logger.error('Invalid origin: %s', origin)
                  error_response = {
                      'statusCode': 403,
                      'headers': response_headers,
                      'body': json.dumps({
                          'error': 'Invalid origin',
                          'origin': origin,
                          'allowed_origins': ALLOWED_ORIGINS,
                          'headers': dict(headers)  # Log all headers for debugging
                      })
                  }
                  logger.error('Returning error: %s', json.dumps(error_response))
                  return error_response

              if event.get('rawPath') == '/test':
                  return {
                      'statusCode': 200,
                      'headers': response_headers,
                      'body': json.dumps({
                          'message': 'Lambda function is working',
                          'bucket': BUCKET_NAME,
                          'allowed_origins': ALLOWED_ORIGINS
                      })
                  }

              try:
                  method = event['requestContext']['http']['method']
                  if method == 'GET':
                      response = handle_get_feedback(event)
                  elif method == 'POST':
                      response = handle_post_feedback(event)
                  else:
                      response = {
                          'statusCode': 405,
                          'body': json.dumps({'error': 'Method not allowed'})
                      }

                  response['headers'] = response_headers
                  return response

              except Exception as e:
                  logger.error('Error in lambda_handler: %s', str(e), exc_info=True)
                  return {
                      'statusCode': 500,
                      'headers': response_headers,
                      'body': json.dumps({'error': 'Internal server error'})
                  }

          def handle_get_feedback(event):
              proposal_id = event.get('queryStringParameters', {}).get('proposalId')
              if not proposal_id:
                  return {
                      'statusCode': 400,
                      'headers': response_headers,
                      'body': json.dumps({'error': 'Missing proposalId'})
                  }
  
              try:
                  file_key = f'feedback/{proposal_id}/comments.json'
                  logger.info('Getting feedback file: %s', file_key)
                  
                  feedback_data = s3_client.get_object(
                      Bucket=BUCKET_NAME,
                      Key=file_key
                  )
                  content = feedback_data['Body'].read().decode('utf-8')
                  feedback_list = json.loads(content)
                  logger.info('Loaded feedback: %s', feedback_list)
  
                  return {
                      'statusCode': 200,
                      'headers': response_headers,
                      'body': json.dumps(feedback_list)
                  }
  
              except ClientError as e:
                  logger.error('S3 error: %s', str(e))
                  error_code = e.response['Error']['Code']
                  if error_code == 'NoSuchKey':
                      return {
                          'statusCode': 404,
                          'headers': response_headers,
                          'body': json.dumps({'error': 'Feedback not found'})
                      }
                  elif error_code in ['AccessDenied', 'InvalidAccessKeyId']:
                      return {
                          'statusCode': 403,
                          'headers': response_headers,
                          'body': json.dumps({'error': 'Access denied to S3'})
                      }
                  raise

          def handle_post_feedback(event):
              try:
                  body = event['body']
                  if not body:
                      return {
                          'statusCode': 400,
                          'headers': response_headers,
                          'body': json.dumps({'error': 'Body cannot be empty'})
                      }

                  feedback = json.loads(body)
                  required_fields = ['proposalId', 'comments', 'commenterName', 'sectionId']
                  missing_fields = [f for f in required_fields if f not in feedback]
                  if missing_fields:
                      return {
                          'statusCode': 400,
                          'headers': response_headers,
                          'body': json.dumps({
                              'error': 'Missing required fields',
                              'fields': missing_fields
                          })
                      }

                  # Use a consistent file key for each proposal
                  file_key = f'feedback/{feedback["proposalId"]}/comments.json'
                  
                  try:
                      # Try to get existing feedback
                      existing_feedback_obj = s3_client.get_object(
                          Bucket=BUCKET_NAME,
                          Key=file_key
                      )
                      existing_content = existing_feedback_obj['Body'].read().decode('utf-8')
                      existing_feedback = json.loads(existing_content)
                      
                      # Ensure existing_feedback is a list
                      if not isinstance(existing_feedback, list):
                          existing_feedback = [existing_feedback]
                          
                  except ClientError as e:
                      if e.response['Error']['Code'] == 'NoSuchKey':
                          # If file doesn't exist, start with empty list
                          existing_feedback = []
                      else:
                          raise

                  # Add new feedback to the list with timestamp
                  feedback['createdAt'] = datetime.utcnow().isoformat()
                  feedback['id'] = str(uuid.uuid4())  # Add unique ID for each feedback
                  existing_feedback.append(feedback)

                  try:
                      s3_client.put_object(
                          Bucket=BUCKET_NAME,
                          Key=file_key,
                          Body=json.dumps(existing_feedback),
                          ContentType='application/json'
                      )
                      logger.info('Successfully uploaded feedback to S3: %s', file_key)
                      
                      return {
                          'statusCode': 200,
                          'headers': response_headers,
                          'body': json.dumps({
                              'message': 'Feedback submitted successfully',
                              'feedback': existing_feedback
                          })
                      }
                  except ClientError as e:
                      logger.error('Error uploading to S3: %s', str(e))
                      return {
                          'statusCode': 500,
                          'headers': response_headers,
                          'body': json.dumps({'error': 'Failed to save feedback'})
                      }

              except json.JSONDecodeError:
                  return {
                      'statusCode': 400,
                      'headers': response_headers,
                      'body': json.dumps({'error': 'Invalid JSON'})
                  }


      Runtime: python3.9
      Timeout: 30
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketName
          ALLOWED_ORIGIN: !Sub 'https://${DomainName}'

  FeedbackFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      TargetFunctionArn: !GetAtt FeedbackFunction.Arn
      Cors:
        AllowOrigins: 
          - !Sub 'https://${DomainName}'
          - 'http://localhost:5173'
          - 'http://localhost:3000'
        AllowMethods: 
          - GET
          - POST
          - HEAD
        AllowHeaders: 
          - content-type
          - origin
          - accept
          - authorization
        MaxAge: 300

  # Add permission for Function URL to invoke Lambda
  FeedbackFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FeedbackFunction
      Action: lambda:InvokeFunctionUrl
      Principal: '*'
      FunctionUrlAuthType: NONE

Outputs:
  WebsiteURL:
    Description: Website URL
    Value: !Sub 'https://${DomainName}'
  
  CloudFrontDomainName:
    Description: CloudFront Distribution Domain Name
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDomainName'
  
  CloudFrontDistributionURL:
    Description: CloudFront Distribution URL
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'
  
  DistributionId:
    Description: CloudFront Distribution ID
    Value: !Ref CloudFrontDistribution
  
  BucketName:
    Description: Name of S3 bucket
    Value: !Ref S3Bucket

  FeedbackUserAccessKeyId:
    Description: Access Key ID for feedback management
    Value: !Ref FeedbackUserAccessKey

  FeedbackUserSecretAccessKey:
    Description: Secret Access Key for feedback management
    Value: !GetAtt FeedbackUserAccessKey.SecretAccessKey

  FeedbackFunctionUrl:
    Description: URL for the feedback Lambda function
    Value: !GetAtt FeedbackFunctionUrl.FunctionUrl